datasource database {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation", "selectRelationCount", "orderByAggregateGroup", "filterJson"]
}

generator nestgraphql {
  provider                     = "node -r ts-node/register/transpile-only src/index.ts"
  output                       = "../src/@generated"
  noAtomicOperations           = false
  combineScalarFilters         = false
  reExport                     = None
  emitSingle                   = false
  emitCompiled                 = false
  purgeOutput                  = false
  fields_Validator_from        = "class-validator"
  fields_Validator_input       = true
  fields_Validator_output      = true
  fields_Validator_namedImport = true
  fields_Helpers_from          = "./helpers/transforms.dto.ts"
  fields_Helpers_input         = true
  fields_Helpers_output        = true
  fields_Helpers_importOnly    = true
  fields_Helpers_namedImport   = true
  fields_Transformer_from      = "class-transformer"
  fields_Transformer_input     = true
  fields_Transformer_output    = true
  fields_Swagger_from          = "@nestjs/swagger"
  fields_Swagger_input         = true
  fields_Scalars_from          = "graphql-scalars"
  fields_Scalars_input         = true
  useInputType_WhereInput_ALL  = "WhereInput"
}

/// Notification model to display relevant notifications.
/// Generally works for various models. Includes utility methods.
/// ```ts
/// const note = new Notification({...})
/// if (timeout && !note.seen) {
///   // Notification has not been seen in x days, repin it
///   note.repin()
/// }
/// ```
model Notification {
  /// @Transformer.Type(() => String)
  /// @Validator.IsString()
  id    String    @id @default(cuid())
  /// Timestamp when note has been seen/recognized üìù.
  /// Input can be Date or valid date string but will always be transformed to Date.
  /// @Helpers.dateKindTransform() // -> use to only import stuff
  /// @Transformer.Transform(dateKindTransform)
  /// @Validator.IsDate({message:`$property must be a Date instance or valid ISO8601 date string`})
  seen  DateTime?
  /// Notification title. @example Your report is ready ü•≥
  /// @Transformer.Type(() => String)
  /// @Validator.IsString()
  title String




  text String

  /// Additional metadata that should be included to the note, like 'from UserXY' etc.
  /// @PropertyType({ name: 'JsonObject', from: 'type-fest', namedImport: true })
  meta String


  // FIXME: Finish description!
  /// Additional data being sent with the note. Limited to
  /// @PropertyType({ name: 'JsonObject', from: 'type-fest', namedImport: true })
  data Json?

}

/// NOTE: We currently do not need, neither support user.
/// This user model is soely for demonstration and testing purposes.
/// @default - false
model SuperUser {
  /// @Transformer.Type(() => String)
  /// @Validator.IsString()
  id           String  @id @default(cuid())
  /// Valid email for each user üìß. @unique
  /// @Transformer.Type(() => String)
  /// @Validator.IsString()
  /// @Validator.IsEmail()
  email        String  @unique
  /// Secure password üõÇ
  // To omit the field in the generated output dto:
  /// @Transformer.Exclude()
  /// @Transformer.Type(() => String)
  /// @Validator.IsString()
  password     String
  /// Users name including all pre and surnames. @example John Doe
  /// @Transformer.Type(() => String)
  /// @Validator.IsAlphanumeric()
  /// @Validator.MinLength(4,{message: `Wow ... that's a short name!`})
  /// @Validator.MaxLength(32,{message: `Oh no üò±. It's too long!`})
  /// @Validator.IsOptional()
  name         String?
  /// Users age. @example 28
  /// @Transformer.Type(() => Number)
  /// @Validator.IsInt()
  /// @Validator.IsPositive()
  /// @Validator.Min(3)
  /// @Validator.Max(99, {message: `Wait ... I think you're way to old ü§î`})
  /// @Validator.IsOptional()
  age          Int?
  /// Random number string to test value conversion etc. @example test123
  /// @Transformer.Type(() => Number)
  /// @Validator.IsInt()
  /// @Validator.IsPositive()
  /// @Validator.IsOptional()
  numberString Int?    @default(10)
  /// The role of the user for RBAC.
  /// @Validator.IsEnum(Role)
  role         Role
}

/// User really
/// With muchos textos
/// Grande grande ole
/// @Swagger.ApiExtraModels()
model User {
  /// The id of the user
  id               String    @id @default(cuid())
  /// @Transformer.Type(()=>Number)
  age              Int       @default(99) // -> TODO: Default values for dtos not yet supported
  /// This is a js doc comment!
  /// And we can continue the comment on the next line as well :)
  email            String    @unique
  /// User's name
  /// @Validator.MinLength(3)
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(50, {message: `Oh no üò±. It's too long!`})
  name             String    @unique
  // @HideField()
  password         String
  bio              String?
  image            String?
  following        User[]    @relation("UserFollows", references: [id])
  followers        User[]    @relation("UserFollows", references: [id])
  favoriteArticles Article[] @relation(name: "FavoritedArticles", references: [id])
  articles         Article[] @relation("ArticleAuthor")
  comments         Comment[]
  countComments    Int?
  rating           Float?
  role             Role?
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  articles Article[]
}

model Article {
  id             String    @id @default(cuid())
  slug           String    @unique
  title          String
  description    String
  body           String
  tags           Tag[]
  // @HideField({ match: '*Create*Input' })
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoritesCount Int       @default(0)
  author         User      @relation(name: "ArticleAuthor", fields: [authorId], references: [id])
  authorId       String
  favoritedBy    User[]    @relation(name: "FavoritedArticles", references: [id])
  comments       Comment[]
  active         Boolean?  @default(true)
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  // @HideField({ match: '*Update*Input' })
  updatedAt DateTime @updatedAt
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
}

/// User role ü§∑üèª‚Äç‚ôÇÔ∏è
enum Role {
  /// The user has default permissions üôÇ
  /// @Validator.IsString()
  USER
  /// The user has all available permissions ü•≥
  /// @Validator.IsString()
  ADMIN
}

model Dummy {
  id      String   @id
  created DateTime @default(now())
  floaty  Float
  int     Int?
  float   Float?
  bytes   Bytes?
  decimal Decimal?
  bigInt  BigInt?
  json    Json?
  friends String[]
}
